/*/////////////////////////////////

    Mixins

//////////////////////////////////*/

@import 'functions';

@mixin animation($animate...) {
    $max: length($animate);
    $animations: '';

    @for $i from 1 through $max {
        $animations: #{$animations + nth($animate, $i)};

        @if $i < $max {
            $animations: #{$animations + ", "};
        }
    }
    -webkit-animation: $animations;
    -moz-animation: $animations;
    -o-animation: $animations;
    animation: $animations;
}

@mixin keyframes($animationName) {
    @-webkit-keyframes #{$animationName} {
        @content;
    }
    @-moz-keyframes #{$animationName} {
        @content;
    }
    @-o-keyframes #{$animationName} {
        @content;
    }
    @keyframes #{$animationName} {
        @content;
    }
}


@mixin background-size($horizontal: center, $vertical: center) {
    background-position: $horizontal $vertical;
    -moz-background-size: cover;
    -webkit-background-size: cover;
    background-size: cover;
}

//
// Responsive images (local)
// --------------------------------------------------

@mixin image($file, $device) {
    background-image: url(image_path($device, $file));
    background-repeat: no-repeat;

    @media (min--moz-device-pixel-ratio: 1.3),
    (-o-min-device-pixel-ratio: 2.6/2),
    (-webkit-min-device-pixel-ratio: 1.3),
    (min-device-pixel-ratio: 1.3),
    (min-resolution: 1.3dppx) {
        @include background-size();
        background-image: url(image_path($device, str-slice($file, 0, -5) + '@2x' + str-slice($file, -4, -1)));
    }
}

@mixin image_extend($file, $device) {
    background-image: url(image_path_extend($device, $file));
    background-repeat: no-repeat;

    @media (min--moz-device-pixel-ratio: 1.3),
    (-o-min-device-pixel-ratio: 2.6/2),
    (-webkit-min-device-pixel-ratio: 1.3),
    (min-device-pixel-ratio: 1.3),
    (min-resolution: 1.3dppx) {
        background-image: url(image_path_extend($device, str-slice($file, 0, -5) + '@2x' + str-slice($file, -4, -1)));
    }
}

@mixin image_extend_svg($file, $device) {
    background-image: url(image_path_extend($device, $file));
    background-repeat: no-repeat;
}

// responsive media queries
@mixin respond-to($media) {
    @if $media == iphone_5 {
        @media only screen and (max-width: 320px) {
            @content;
        }
    } @else if $media == mobile {
        @media only screen and (max-width: $break-small - 1) {
            @content;
        }
    } @else if $media == tablet {
        @media only screen and (min-width: $break-small) {
            @content;
        }
    } @else if $media == tablet_portrait {
        @media only screen and (min-width: $break-small) and (max-width: $break-medium) {
            @content;
        }
    } @else if $media == desktop {
        @media only screen and (min-width: $break-medium) {
            @content;
        }
    } @else if $media == desktop_big {
        @media only screen and (min-width: $break-large) {
            @content;
        }
    } @else if $media == desktop_1400 {
        @media only screen and (min-width: $break-large-1400) {
            @content;
        }
    } @else if $media == desktop_extra_big {
        @media only screen and (min-width: $break-larger) {
            @content;
        }
    } @else if $media == desktop_1600 {
        @media only screen and (min-width: 1600px) {
            @content;
        }
    } @else if $media == desktop_1800 {
        @media only screen and (min-width: 1800px) {
            @content;
        }
    }
}

@mixin retina() {

    @media (-o-min-device-pixel-ratio: 2.6/2),
    (-webkit-min-device-pixel-ratio: 1.3),
    (min-device-pixel-ratio: 1.3),
    (min-resolution: 1.3dppx)
    {
        @content;
    }
}

@mixin retina_device($device) {

    @if $device == mobile {
        $device-media: 'max-width: ' + $break-small - 1;
    } @else if $device == tablet {
        $device-media: 'min-width: ' + $break-small;
    } @else if $device == desktop {
        $device-media: 'min-width: ' + $break-medium;
    } @else if $device == desktop_big {
        $device-media: 'min-width: ' + $break-large;
    }

    @media
    only screen and (-o-min-device-pixel-ratio: 2.6/2),
    only screen and (-webkit-min-device-pixel-ratio: 1.3),
    only screen and (min-device-pixel-ratio: 1.3),
    only screen and (min-resolution: 1.3dppx)
    {
        @content;
    }
}

@mixin image($file, $device) {
    background-image: url(image_path($device, $file));
    background-repeat: no-repeat;

    @media (min--moz-device-pixel-ratio: 1.3),
    (-o-min-device-pixel-ratio: 2.6/2),
    (-webkit-min-device-pixel-ratio: 1.3),
    (min-device-pixel-ratio: 1.3),
    (min-resolution: 1.3dppx) {
        @include background-size();
        background-image: url(image_path($device, str-slice($file, 0, -5) + '@2x' + str-slice($file, -4, -1)));
    }
}

@mixin opacity($opacity) {
    opacity: $opacity;
}

@mixin size($width, $height: $width) {
    height: $height;
    width: $width;
}

@mixin transform($vars) {
    -ms-transform: $vars;
    -webkit-transform: $vars;
    transform: $vars;
}

@mixin transition($property: all, $duration: $animation, $delay: 0s, $ease: ease-out) {
    transition: $property $duration $ease $delay;
}

@mixin transition_str($vars) {
    transition: $vars;
}

@mixin perspective($perspective) {
    -webkit-perspective: $perspective;
    perspective: $perspective;
}

@mixin text-shadow() {
    //scss-lint:disable ColorVariable
    text-shadow: 1px 1px 1px rgba(0, 0, 0, .2);
    //scss-lint:enable ColorVariable
}

/***[ animation easing ]******************************************************************************************/

$easeInCubic: cubic-bezier(.550, .055, .675, .190);
$easeOutCubic: cubic-bezier(.215, .610, .355, 1);
$easeInOutCubic: cubic-bezier(.645, .045, .355, 1);
$easeInCirc: cubic-bezier(.600, .040, .980, .335);
$easeOutCirc: cubic-bezier(.075, .820, .165, 1);
$easeInOutCirc: cubic-bezier(.785, .135, .150, .860);
$easeInExpo: cubic-bezier(.950, .050, .795, .035);
$easeOutExpo: cubic-bezier(.190, 1, .220, 1);
$easeInOutExpo: cubic-bezier(1, .000, .000, 1);
$easeInQuad: cubic-bezier(.550, .085, .680, .530);
$easeOutQuad: cubic-bezier(.250, .460, .450, .940);
$easeInOutQuad: cubic-bezier(.455, .030, .515, .955);
$easeInQuart: cubic-bezier(.895, .030, .685, .220);
$easeOutQuart: cubic-bezier(.165, .840, .440, 1);
$easeInOutQuart: cubic-bezier(.770, .000, .175, 1);
$easeInQuint: cubic-bezier(.755, .050, .855, .060);
$easeOutQuint: cubic-bezier(.230, 1, .320, 1);
$easeInOutQuint: cubic-bezier(.860, .000, .070, 1);
$easeInSine: cubic-bezier(.470, .000, .745, .715);
$easeOutSine: cubic-bezier(.390, .575, .565, 1);
$easeInOutSine: cubic-bezier(.445, .050, .550, .950);
$easeInBack: cubic-bezier(.600, -.280, .735, .045);
$easeOutBack: cubic-bezier(.175, .885, .320, 1.275);
$easeInOutBack: cubic-bezier(.680, -.550, .265, 1.550);



@mixin placeholder($color, $color2: $white) {

    &::-webkit-input-placeholder {
        /* WebKit browsers */
        color: $color;
        transition: color .2s;
    }

    &::-moz-placeholder {
        /* Mozilla Firefox 19+ */
        color: $color;
        transition: color .2s;
    }

    &:-ms-input-placeholder {
        /* Internet Explorer 10+ */
        color: $color;
        transition: color .2s;
    }

    &:focus::-webkit-input-placeholder {
        /* WebKit browsers */
        color: $color2;
    }

    &:focus::-moz-placeholder {
        /* Mozilla Firefox 19+ */
        color: $color2;
    }

    &:focus:-ms-input-placeholder {
        /* Internet Explorer 10+ */
        color: $color2;
    }
}

@mixin themify() {
    // Iterate over the themes
    @each $theme-name, $theme in $themes {
        $current-theme: $theme !global;
        @if $theme-name == 'default' {
            @content;
        } @else {
            .theme-#{$theme-name} & {
                @content;
            }
        }
    }
}

